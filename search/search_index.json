{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to VectorSearch","text":"<p>VectorSearch (VS) is a self-optimizing hybrid indexing system for scalable and memory-efficient vector retrieval.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Quantization-based candidate filtering</li> <li>Lightweight graph refinement</li> <li>Multi-vector support</li> <li>Caching and memory mapping</li> </ul> <p>Start with Getting Started</p>"},{"location":"benchmarks/","title":"Benchmarks","text":"<p>This section presents detailed evaluations of VectorSearch across multiple benchmark scenarios, highlighting performance within static and dynamic indexing setups, as well as ablation studies on system design components.</p> <p>We evaluate the system using standard datasets such as Glove1.2M, SIFT10M, Deep1M, and News, and compare to state-of-the-art baselines including FAISS, HNSWlib, LVQ, and Milvus.</p>"},{"location":"benchmarks/#sections","title":"Sections","text":"<ul> <li> <p>Static Indexing:   Evaluates precision, memory usage, and query latency on pre-built indexes using static datasets.</p> </li> <li> <p>Dynamic Indexing:   Measures update latency, scalability, and post-insertion accuracy for real-time index updates without reconstruction.</p> </li> <li> <p>Ablation Studies:   Evaluates the impact of quantization, graph reranking, and memory optimization strategies on system performance.</p> </li> </ul>"},{"location":"benchmarks/#benchmark-summary-across-all-tasks","title":"\ud83d\udcca Benchmark Summary (Across All Tasks)","text":"Method Dataset Precision@10 Recall@10 Latency (ms) Memory (GiB) FAISS-IVFPQ Glove1.2M 0.78 0.71 12 1.2 HNSWlib Glove1.2M 0.85 0.79 20 2.6 LVQ [VLDB'23] Deep1M 0.88 0.84 15 1.8 VectorSearch (Ours) All 0.92 0.87 11 1.0 <p>Full tables and visual comparisons are included in each section linked above.</p>"},{"location":"getting_started/","title":"Getting Started with VectorSearch (VS)","text":"<p>VectorSearch (VS) is a self-optimizing hybrid indexing system designed for scalable and memory-efficient vector retrieval. This guide walks you through setting up the system and running a sample search on a small dataset.</p>"},{"location":"getting_started/#prerequisites","title":"Prerequisites","text":"<p>Ensure your environment is running Ubuntu (20.04 or later). The instructions below are tested on an Azure VM (Standard_E64ds_v4), but they work in any compatible Linux setup.</p>"},{"location":"getting_started/#installation","title":"\ud83d\udce6 Installation","text":""},{"location":"getting_started/#1-install-system-dependencies","title":"1. Install System Dependencies","text":"<p>```bash sudo apt-get update &amp;&amp; sudo apt-get install -y \\   build-essential cmake g++ make libomp-dev \\   python3 python3-pip python3-venv python3-dev</p>"},{"location":"visualizations/","title":"Visualizations","text":""},{"location":"visualizations/#vectorsearch-vs-system-architecture","title":"VectorSearch (VS) System Architecture","text":""},{"location":"visualizations/#embedding-visualization","title":"Embedding Visualization","text":"<p>2D visualization of embeddings by topic (Health, Technology, Science), demonstrating how semantic clusters are separated in reduced space.</p>"},{"location":"benchmarks/Overview/","title":"Benchmarks","text":"<p>This section presents detailed evaluations of VectorSearch across multiple benchmark scenarios, highlighting performance within static and dynamic indexing setups, as well as ablation studies on system design components.</p> <p>We evaluate the system using standard datasets such as Glove1.2M, SIFT10M, Deep1M, and News, and compare to state-of-the-art baselines including FAISS, HNSWlib, LVQ, and Milvus.</p>"},{"location":"benchmarks/Overview/#sections","title":"Sections","text":"<ul> <li> <p>Static Indexing:   Evaluates precision, memory usage, and query latency on pre-built indexes using static datasets.</p> </li> <li> <p>Dynamic Indexing:   Measures update latency, scalability, and post-insertion accuracy for real-time index updates without reconstruction.</p> </li> <li> <p>Ablation Studies:   Evaluates the impact of quantization, graph reranking, and memory optimization strategies on system performance.</p> </li> </ul>"},{"location":"benchmarks/Overview/#benchmark-summary-across-all-tasks","title":"\ud83d\udcca Benchmark Summary (Across All Tasks)","text":"Method Dataset Precision@10 Recall@10 Latency (ms) Memory (GiB) FAISS-IVFPQ Glove1.2M 0.78 0.71 12 1.2 HNSWlib Glove1.2M 0.85 0.79 20 2.6 LVQ [VLDB'23] Deep1M 0.88 0.84 15 1.8 VectorSearch (Ours) All 0.92 0.87 11 1.0 <p>Full tables and visual comparisons are included in each section linked above.</p>"}]}